/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.harper.asteroids;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.harper.asteroids.model.CloseApproachData;
import com.harper.asteroids.model.Feed;
import com.harper.asteroids.model.NearEarthObject;
import com.harper.asteroids.service.util.DateUtil;
import com.harper.asteroids.service.util.ServiceConstants;
import org.glassfish.jersey.client.ClientConfig;

import java.io.IOException;

import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Main app. Gets the list of closest asteroids from NASA at
 * https://api.nasa.gov/neo/rest/v1/feed?start_date=START_DATE&end_date=END_DATE&api_key=API_KEY
 * See documentation on the Asteroids - NeoWs API at https://api.nasa.gov/
 *
 * Prints the 10 closest passing next week
 *
 * Risk of getting throttled if we don't sign up for own key on https://api.nasa.gov/
 * Set environment variable 'API_KEY' to override.
 */
public class AsteroidsAnalyzer {
    private final String apiKey ;

    private final Client client;
    private final ObjectMapper mapper ;

    public AsteroidsAnalyzer() {
        this.mapper = new ObjectMapper();
        ClientConfig configuration = new ClientConfig();
        this.client = ClientBuilder.newBuilder()
                .connectTimeout(1000, TimeUnit.MILLISECONDS)
                .readTimeout(3000, TimeUnit.MILLISECONDS)
                .withConfig(configuration)
                .build();
        String key = System.getenv("API_KEY");
        if(key != null && !key.isBlank()) {
            this.apiKey = key;
        }else {
            this.apiKey = "2uCCVbEkGTLoNv7Z5Trqr6sgg715jgFlridoU9ZY";
        }
    }

    /**
     * Scan space for asteroids close to earth
     */
    private void checkForAsteroids() {
        LocalDate today = LocalDate.now();
        Response response = client
                .target(ServiceConstants.NASA_API_URL).path("feed")
                .queryParam("start_date",  DateUtil.getStartDateOfCurrentWeek())
                .queryParam("end_date", DateUtil.getEndDateOfCurrentWeek())
                .queryParam("api_key", this.apiKey)
                .request(MediaType.APPLICATION_JSON)
                .get();
        System.out.println("Got response: " + response);
        if(response.getStatus() == Response.Status.OK.getStatusCode()) {
            String content = response.readEntity(String.class);


            try {
                Feed neoFeed = mapper.readValue(content, Feed.class);
                ApproachDetector approachDetector = new ApproachDetector(this.mapper,this.client,this.apiKey);

                List<NearEarthObject> closest =  approachDetector.getClosestApproaches(neoFeed.getAllObjectIds(),10);
                System.out.println("Hazard?   Distance(km)    When                             Name");
                System.out.println("----------------------------------------------------------------------");
                for(NearEarthObject neo: closest) {
                    Optional<CloseApproachData> closestPass = neo.getCloseApproachData().stream()
                            .filter(closeApproachData -> DateUtil.isDateInCurrentWeek(closeApproachData.getCloseApproachEpochDate()))
                            .min(Comparator.comparing(CloseApproachData::getMissDistance));

                    if(closestPass.isEmpty()) continue;

                    System.out.printf("%s       %12.3f  %s    %s%n",
                            (neo.isPotentiallyHazardous() ? "!!!" : " - "),
                            closestPass.get().getMissDistance().getKilometers(),
                            closestPass.get().getCloseApproachDateTime(),
                            neo.getName()
                            );
                }
            } catch (IOException e) {
                System.err.println("Failed scanning for asteroids: " + e);
            }
        }
        else {
            System.err.println("Failed querying feed, got " + response.getStatus() + " " + response.getStatusInfo());
        }

    }


    public static void main(String[] args) {
        new AsteroidsAnalyzer().checkForAsteroids();
    }
}
